using System;using System.Collections.ObjectModel;using System.Reactive;using PayrollSystem.Models;using ReactiveUI;namespace PayrollSystem.ViewModels;public class AddHourlyWageWorkerViewModel : ViewModelBase{    private string? _hourlyName;    private string? _hourlyGender;    private string? _normalHourlySalary;    private string? _overtimeHourlySalary;    private string? _standartOfHourlyWorkingHours;        public ObservableCollection<HourlyWageWorker> HourlyWorkers { get; }    public ReactiveCommand<Unit, Unit> AddHourlyWorkers { get; }    public AddHourlyWageWorkerViewModel()    {        HourlyWorkers = new ObservableCollection<HourlyWageWorker>();        AddHourlyWorkers = ReactiveCommand.Create(() =>        {            if (CheckEquilName(_hourlyName) && CheckNullString(_hourlyName) && CheckNullString(_hourlyGender) &&                Convert.ToInt32(_normalHourlySalary) > 0 &&                Convert.ToInt32(_overtimeHourlySalary) > 0 && Convert.ToInt32(_standartOfHourlyWorkingHours) > 0)            {                HourlyWorkers.Add(                    new HourlyWageWorker()                    {                        FullName = _hourlyName,                        Gender = _hourlyGender,                        NormalSalary = Convert.ToInt32(_normalHourlySalary),                        OvertimeSalary = Convert.ToInt32(_overtimeHourlySalary),                        StandartOfWorkingHours = Convert.ToInt32(_standartOfHourlyWorkingHours)                    });            }        });    }    private bool CheckNullString(string? str)    {        if (String.IsNullOrEmpty(str))        {            return false;        }        return true;    }        private bool CheckEquilName(string? name)    {        for (int iterator = 0; iterator < HourlyWorkers.Count; iterator++)        {            if (name == HourlyWorkers[iterator].FullName) return false;        }        return true;    }        public string HourlyName    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _hourlyName, value);            }        }        get        {            if (_hourlyName != null)                return _hourlyName;            throw new NullReferenceException();        }    }        public string? HourlyGender    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _hourlyGender, value);            }        }            get        {            if (_hourlyGender != null)                return _hourlyGender;                throw new NullReferenceException();        }    }        public string? NormalHourlySalary    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _normalHourlySalary, value);            }        }        get        {            if (_normalHourlySalary != null)                return _normalHourlySalary;            throw new NullReferenceException();        }    }        public string? OvertimeHourlySalary    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _overtimeHourlySalary, value);            }        }        get        {            if (_overtimeHourlySalary != null)                return _overtimeHourlySalary;            throw new NullReferenceException();        }    }    public string? StandartOfHourlyWorkingHours    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _standartOfHourlyWorkingHours, value);            }        }        get        {            if (_standartOfHourlyWorkingHours != null)                return _standartOfHourlyWorkingHours;            throw new NullReferenceException();        }    }}