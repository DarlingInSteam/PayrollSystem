using System;using System.Collections.Generic;using System.Collections.ObjectModel;using System.Reactive;using DynamicData.Binding;using PayrollSystem.Models;using ReactiveUI;using PayrollSystem.Models;namespace PayrollSystem.ViewModels;public class AddComissionWageWorkerViewModel : ViewModelBase{    private string? _comissionName;    private string? _comissionGender;    private string? _comissionSalary;    private string? _comissionPercent;    private string? _workerName;    public ObservableCollection<ComissionWageWorker> ComissionWageWorkers { get; set; }     public ObservableCollection<ComissionWageWorker> _comissionWageWorkers { get; set; }    public ReactiveCommand<Unit, Unit> UpdateComissionWorkersDG { get; }    public AddComissionWageWorkerViewModel()    {        ComissionWageWorkers = new ObservableCollectionExtended<ComissionWageWorker>();        _comissionWageWorkers = new ObservableCollection<ComissionWageWorker>();        UpdateComissionWorkersDG = ReactiveCommand.Create(() =>        {            ComissionWageWorkers.Clear();            foreach (var t in _comissionWageWorkers)            {                ComissionWageWorkers.Add(                    t                );            }        });    }    public void FireWorker(string name)    {        for (int iterator = 0; iterator < _comissionWageWorkers.Count; iterator++)        {            if (_comissionWageWorkers[iterator].FullName != name &&                _comissionWageWorkers[iterator].FullName + " " != name &&                _comissionWageWorkers[iterator].FullName != name + " " &&                _comissionWageWorkers[iterator].FullName + " " != name + " ") continue;            _comissionWageWorkers.RemoveAt(iterator);            return;        }                var messageBox = MessageBox.Avalonia.MessageBoxManager            .GetMessageBoxStandardWindow("Ошибка ввода", "Такого имени не существует");        messageBox.Show();    }        public void AddComissionWorker()    {        if (!CheckEquilName(_comissionName) || !CheckNullString(_comissionName) || !CheckNullString(_comissionGender) ||            !CheckRightNumber(_comissionSalary) ||            !CheckRightNumber(_comissionPercent) || !CheckRightGender(_comissionGender) ||            !CheckPercent(_comissionPercent)) return;        ComissionWageWorkers.Add(            new ComissionWageWorker()            {                FullName = _comissionName,                Gender = _comissionGender,                Salary = Convert.ToInt32(_comissionSalary),                Percentage = Convert.ToInt32(_comissionPercent),            });                    _comissionWageWorkers.Add(            new ComissionWageWorker()            {                FullName = _comissionName,                Gender = _comissionGender,                Salary = Convert.ToInt32(_comissionSalary),                Percentage = Convert.ToInt32(_comissionPercent),            });    }        private bool CheckNullString(string? str)    {        if (!String.IsNullOrEmpty(str)) return true;        var messageBox = MessageBox.Avalonia.MessageBoxManager            .GetMessageBoxStandardWindow("Ошибка ввода", "Присутствует пустая строка");        messageBox.Show();        return false;    }    private bool CheckRightGender(string gender)    {        if (gender is "Мужской" or "Женский" or "Мужской " or "Женский "             or "мужской" or "женский" or "мужской " or "женский ") return true;        var messageBox = MessageBox.Avalonia.MessageBoxManager            .GetMessageBoxStandardWindow("Ошибка ввода", "Неправильно введен гендер");        messageBox.Show();        return false;    }    private bool CheckPercent(string percent)    {        if (Convert.ToInt32(percent) <= 100) return true;                var messageBox = MessageBox.Avalonia.MessageBoxManager            .GetMessageBoxStandardWindow("Ошибка ввода", "Выплата не может быть больше ста процентов");        messageBox.Show();        return false;    }        private bool CheckRightNumber(string num)    {        if (int.TryParse(num, out int numericValue) && num[0] != '-' && num[0] != '0') return true;        var messageBox = MessageBox.Avalonia.MessageBoxManager            .GetMessageBoxStandardWindow("Ошибка ввода", "Неправильно задано число");        messageBox.Show();        return false;    }        private bool CheckEquilName(string? name)    {        foreach (var t in ComissionWageWorkers)        {            if (name == t.FullName)            {                var messageBox = MessageBox.Avalonia.MessageBoxManager                    .GetMessageBoxStandardWindow("Ошибка ввода", "Введено уже существующее имя");                messageBox.Show();                return false;            }        }        return true;    }        public string WorkerName    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _workerName, value);            }        }        get        {            if (_workerName != null)                return _workerName;            throw new NullReferenceException();        }    }        public string ComissionName    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _comissionName, value);            }        }        get        {            if (_comissionName != null)                return _comissionName;            throw new NullReferenceException();        }    }        public string? ComissionGender    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _comissionGender, value);            }        }            get        {            if (_comissionGender != null)                return _comissionGender;                throw new NullReferenceException();        }    }        public string? ComissionSalary    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _comissionSalary, value);            }        }        get        {            if (_comissionSalary != null)                return _comissionSalary;            throw new NullReferenceException();        }    }        public string? ComissionPercent    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _comissionPercent, value);            }        }        get        {            if (_comissionPercent != null)                return _comissionPercent;            throw new NullReferenceException();        }    }}