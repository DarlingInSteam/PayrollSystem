using System;using System.Collections.ObjectModel;using System.Reactive;using PayrollSystem.Models;using ReactiveUI;using PayrollSystem.Models;namespace PayrollSystem.ViewModels;public class AddComissionWageWorkerViewModel : ViewModelBase{    private string? _comissionName;    private string? _comissionGender;    private string? _comissionSalary;    private string? _comissionPercent;        public ObservableCollection<ComissionWageWorker> ComissionWageWorkers { get; }    public ReactiveCommand<Unit, Unit> AddComissionWorkers { get; }    public AddComissionWageWorkerViewModel()    {        ComissionWageWorkers = new ObservableCollection<ComissionWageWorker>();        AddComissionWorkers = ReactiveCommand.Create(() =>        {            if (CheckEquilName(_comissionName) && CheckNullString(_comissionName) && CheckNullString(_comissionGender) &&                Convert.ToInt32(_comissionSalary) > 0 &&                Convert.ToInt32(_comissionPercent) > 0)            {                ComissionWageWorkers.Add(                    new ComissionWageWorker()                    {                        FullName = _comissionName,                        Gender = _comissionGender,                        Salary = Convert.ToInt32(_comissionSalary),                        Percentage = Convert.ToInt32(_comissionPercent),                    });            }        });    }    private bool CheckNullString(string? str)    {        if (String.IsNullOrEmpty(str))        {            return false;        }        return true;    }        private bool CheckEquilName(string? name)    {        for (int iterator = 0; iterator < ComissionWageWorkers.Count; iterator++)        {            if (name == ComissionWageWorkers[iterator].FullName) return false;        }        return true;    }        public string ComissionName    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _comissionName, value);            }        }        get        {            if (_comissionName != null)                return _comissionName;            throw new NullReferenceException();        }    }        public string? ComissionGender    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _comissionGender, value);            }        }            get        {            if (_comissionGender != null)                return _comissionGender;                throw new NullReferenceException();        }    }        public string? ComissionSalary    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _comissionSalary, value);            }        }        get        {            if (_comissionSalary != null)                return _comissionSalary;            throw new NullReferenceException();        }    }        public string? ComissionPercent    {        set        {            if (value != null && !string.Equals(value, ""))            {                this.RaiseAndSetIfChanged(ref _comissionPercent, value);            }        }        get        {            if (_comissionPercent != null)                return _comissionPercent;            throw new NullReferenceException();        }    }}